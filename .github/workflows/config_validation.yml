name: Chain Config Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'chains/**.json'
      - 'groups/**.json'

jobs:
  validate-configs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for changed-files

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: scripts/config-validator/package-lock.json

      - name: Get changed JSON files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            chains/**/*.json
            groups/**/*.json

      - name: Install Validator Script Dependencies
        if: steps.changed-files.outputs.any_changed == 'true'
        working-directory: ./scripts/config-validator
        run: npm install

      # Optional: Add build step if needed (uncomment below)
      # - name: Build Validator Script
      #   if: steps.changed-files.outputs.any_changed == 'true'
      #   working-directory: ./scripts/config-validator
      #   run: npm run build

      - name: Validate Changed Files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "Changed JSON files in chains/: ${{ steps.changed-files.outputs.all_changed_files }}"
          VALIDATION_FAILED=false
          # Ensure jq is installed
          sudo apt-get update && sudo apt-get install -y jq || echo "jq already installed or install failed (proceeding)"

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Processing $file..."
            FILE_VALIDATION_PASSED=false
            FILE_PATH="$GITHUB_WORKSPACE/$file"

            # Check file type and dispatch to appropriate validator
            if [[ "$file" == */chain.json ]]; then
              echo "Detected chain.json file."
              # Step 1: Check chain_type using jq
              chain_type=$(jq -e -r .chain_type "${FILE_PATH}" 2>/dev/null)
              jq_exit_code=$?

              if [[ $jq_exit_code -eq 0 && "$chain_type" == "initia" ]]; then
                # Step 2a: Run Initia validator
                echo "Detected chain_type=initia. Running Initia validation script..."
                if npx ts-node $GITHUB_WORKSPACE/scripts/config-validator/src/validate-initia.ts "${FILE_PATH}"; then
                  echo "---> Validation PASSED for Initia chain $file."
                  FILE_VALIDATION_PASSED=true
                else
                  echo "---> Validation FAILED for Initia chain $file."
                fi
              else
                # Step 2b: Run general chain validator
                if [[ $jq_exit_code -ne 0 ]]; then
                    echo "Warning: Could not read .chain_type from $file (jq exit code: $jq_exit_code). Assuming non-Initia chain."
                else
                    echo "Detected chain_type=$chain_type (or empty). Running general chain validation..."
                fi
                if npx ts-node $GITHUB_WORKSPACE/scripts/config-validator/src/validate-general.ts "${FILE_PATH}"; then
                  echo "---> Validation PASSED for non-Initia chain $file."
                  FILE_VALIDATION_PASSED=true
                else
                  echo "---> Validation FAILED for non-Initia chain $file."
                fi
              fi

            elif [[ "$file" == */assetlist.json ]]; then
              # Step 2c: Run assetlist validator
              echo "Detected assetlist.json file. Running assetlist validation script..."
              if npx ts-node $GITHUB_WORKSPACE/scripts/config-validator/src/validate-assetlist.ts "${FILE_PATH}"; then
                echo "---> Validation PASSED for assetlist $file."
                FILE_VALIDATION_PASSED=true
              else
                echo "---> Validation FAILED for assetlist $file."
              fi

            elif [[ "$file" == */groups.json ]]; then
              # Step 2d: Run groups validator
              echo "Detected groups.json file. Running groups validation script..."
              if npx ts-node $GITHUB_WORKSPACE/scripts/config-validator/src/validate-groups.ts "${FILE_PATH}"; then
                echo "---> Validation PASSED for groups config $file."
                FILE_VALIDATION_PASSED=true
              else
                echo "---> Validation FAILED for groups config $file."
              fi

            elif [[ "$file" == */group_assets.json ]]; then
              # Step 2e: Run group assets validator
              echo "Detected group_assets.json file. Running group assets validation script..."
              if npx ts-node $GITHUB_WORKSPACE/scripts/config-validator/src/validate-group-assets.ts "${FILE_PATH}"; then
                echo "---> Validation PASSED for group assets config $file."
                FILE_VALIDATION_PASSED=true
              else
                echo "---> Validation FAILED for group assets config $file."
              fi

            else
              echo "Skipping file (unrecognized type): $file"
              FILE_VALIDATION_PASSED=true # Mark skipped files as passed for overall check
            fi

            if [[ "$FILE_VALIDATION_PASSED" == false ]]; then
                echo "Setting workflow failure flag for $file"
                VALIDATION_FAILED=true
            fi

            echo # Add a newline for readability
          done

          # Final check
          if [[ "$VALIDATION_FAILED" == true ]]; then
            echo "One or more configuration validations failed."
            exit 1
          fi
          # If we reach here, no validation failed
          echo "All configuration validations passed."
          exit 0 